"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app_1 = require("./app");
const routes_1 = require("./routes/routes");
const db_1 = require("./config/db");
const authController_1 = require("./featurse/authTs/authController");
const rolesController_1 = require("./featurse/roles/rolesController");
const usersController_1 = require("./featurse/users/usersController");
const authService_1 = require("./featurse/authTs/authService");
const redis_1 = require("./config/redis");
const authModel_1 = require("./featurse/authTs/authModel");
const rolesService_1 = require("./featurse/roles/rolesService");
const usersService_1 = require("./featurse/users/usersService");
const middleware_1 = require("./middleware/middleware");
const usersModel_1 = require("./featurse/users/usersModel");
const rolesModel_1 = require("./featurse/roles/rolesModel");
const connectDB_1 = require("./featurse/roles/connector/connectDB");
const connectDB_2 = require("./featurse/users/connector/connectDB");
const connectorRedis_1 = require("./featurse/users/connector/connectorRedis");
const connectorRedis_2 = require("./featurse/authTs/connector/connectorRedis");
const success_1 = require("./config/success");
const errors_1 = require("./config/errors");
const dbPool = new db_1.DatabasePool();
const success = new success_1.Success("Операция выполнена успешно");
const errors = new errors_1.Errors("Ошибка выполнения операции", 400);
const connectDBRoles = new connectDB_1.ConnectorDBRoles(dbPool);
const connectorDBUsers = new connectDB_2.ConnectorDBUsers(dbPool);
const usersModel = new usersModel_1.UsersModel(connectorDBUsers);
const rolesModel = new rolesModel_1.RolesModel(connectDBRoles);
const redisClient = new redis_1.RedisClient();
const connectorRedisUsers = new connectorRedis_1.ConnectorRedisUsers(redisClient);
const connectorRedisAuth = new connectorRedis_2.ConnectorRedisAuth(redisClient);
const authModel = new authModel_1.AuthModel(dbPool);
const authService = new authService_1.AuthService(authModel, connectorRedisAuth);
const rolesService = new rolesService_1.RolesService(rolesModel);
const usersService = new usersService_1.UsersService(usersModel, connectorRedisUsers);
const authController = new authController_1.AuthController(authService, success, errors);
const rolesController = new rolesController_1.RolesController(rolesService, success, errors);
const usersController = new usersController_1.UsersController(usersService, success, errors);
const middleware = new middleware_1.Middleware(redisClient);
const routes = new routes_1.Routes(authController, rolesController, usersController, middleware);
const app = new app_1.App(routes, dbPool, redisClient);
app.start();
